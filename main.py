import logging
import requests
import asyncio
import nest_asyncio
import re
import os
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from telegram.error import InvalidToken

# --- –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ALLOWED_CHAT_ID = int(os.getenv("ALLOWED_CHAT_ID"))

logging.basicConfig(level=logging.INFO)

# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤
chat_history = {}
keyword_mode = {}  # –†–µ–∂–∏–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞

# --- –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ ---
def format_keywords(text):
    text = text.strip().lower()
    text = text.replace(" ", "/")
    text = re.sub(r'/+', '/', text)
    words = text.split("/")

    prepositions = {"–¥–ª—è", "–ø–æ–¥", "–≤", "–Ω–∞", "—Å", "–∫"}
    seen_preps = set()
    seen_words = set()
    cleaned_words = []

    for word in words:
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã —Å–ª–æ–≤
        if word in seen_words and word not in prepositions:
            continue  
        if word in prepositions:
            if word in seen_preps:
                continue  
            seen_preps.add(word)
        seen_words.add(word)
        cleaned_words.append(word)

    result = "/".join(cleaned_words)
    result = re.sub(r'/+', '/', result).strip("/")
    return result


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_text = update.message.text.strip()

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
    if chat_id != ALLOWED_CHAT_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ ---
    if user_text.lower() == "profbs admin":
        keyword_mode[chat_id] = False
        await update.message.reply_text("üîì –ë–æ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º GPT.")
        return

    if user_text.lower() == "profbs admin start":
        keyword_mode[chat_id] = True
        await update.message.reply_text("üéØ –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–±–æ—Ä–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω)
    if chat_id not in keyword_mode:
        keyword_mode[chat_id] = True  # –°—Ç–∞—Ä—Ç—É–µ–º –≤ —Ä–µ–∂–∏–º–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    if chat_id not in chat_history:
        chat_history[chat_id] = []

    # --- –†–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ---
    if keyword_mode[chat_id]:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞, 1‚Äì3 —Å–ª–æ–≤–∞)
        if len(user_text.split()) > 4:  
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —è –ø–æ–¥–±–µ—Ä—É –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            return

        system_prompt = """
üéØ –ü—Ä–æ–º—Ç: –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.

üìå –ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ (Wildberries, Ozon –∏ –¥—Ä.) –∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º.

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∏ —Å—Ä–µ–¥–Ω–µ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ—á—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.

–í–∫–ª—é—á–∞–µ–º:
- –°–ª–µ–Ω–≥: –±—ã—Ç–æ–≤—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ–æ—Ä–º—ã (—Å–≤—á, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞, —Å—Ç–∏—Ä–∞–ª–∫–∞, —Ç–µ–ª–µ–∫).
- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏: –º–æ–∑–∞–π–∫–∞, —Ç—É–∞–ª–µ—Ç–∫–∞.
- –†–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏: —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

–ò—Å–∫–ª—é—á–∞–µ–º: –±—Ä–µ–Ω–¥—ã, –º–æ–¥–µ–ª–∏, –¥—É–±–ª–∏ –ø–æ —Å–º—ã—Å–ª—É.

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 18‚Äì20 –∫–ª—é—á–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

üñã –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞.
- –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —á–∞—Å—Ç—å —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è / (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ/–Ω–∞—É—à–Ω–∏–∫–∏", "–Ω–∞—É—à–Ω–∏–∫–∏/–¥–ª—è/–º—É–∑—ã–∫–∏").
- –ü—Ä–µ–¥–ª–æ–≥–∏ (–¥–ª—è, –≤, –Ω–∞, –ø–æ–¥, —Å) –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑, –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö.
- –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Å–ª–∏—Ç–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ–Ω–∞—É—à–Ω–∏–∫–∏").
- –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
- –ú–∏–Ω–∏–º—É–º 18‚Äì20 —Å–ª–æ–≤.

üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
–ù–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç–≤–µ—á–∞–π:
"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —è –ø–æ–¥–±–µ—Ä—É –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"

üîß –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ–¥–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
–í—ã—Ö–æ–¥: profbs admin ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è.
–í–æ–∑–≤—Ä–∞—Ç: profbs admin start ‚Äî —Å–Ω–æ–≤–∞ —Ä–µ–∂–∏–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
"""
    else:
        system_prompt = "–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ GPT-4o. –û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –ø–æ–º–æ–≥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    chat_history[chat_id].append({"role": "user", "content": user_text})

    try:
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENAI_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "gpt-4o",
                "messages": [{"role": "system", "content": system_prompt}] + chat_history[chat_id],
                "max_tokens": 500
            }
        )

        logging.info(f"API –æ—Ç–≤–µ—Ç: {response.text}")
        data = response.json()

        if "choices" in data:
            bot_reply = data["choices"][0]["message"]["content"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ..."
            if "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ" in bot_reply.lower():
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —è –ø–æ–¥–±–µ—Ä—É –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
                return

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if keyword_mode[chat_id]:
                bot_reply = format_keywords(bot_reply)

            chat_history[chat_id].append({"role": "assistant", "content": bot_reply})
        else:
            bot_reply = f"–û—à–∏–±–∫–∞ API: {data}"

    except Exception as e:
        bot_reply = f"–û—à–∏–±–∫–∞: {str(e)}"

    await update.message.reply_text(bot_reply)


async def main():
    nest_asyncio.apply()
    bot = Bot(token=TELEGRAM_TOKEN)
    await bot.delete_webhook()  # –£–±–∏—Ä–∞–µ–º –≤–µ–±—Ö—É–∫
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await app.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
